* Defaults
在单个buffer里打开文件：
#+BEGIN_SRC emacs-lisp
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-dwim-target t)

    (put 'dired-find-alternate-file 'disabled nil)
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
      (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file ".."))))  ; was dired-up-directory)

  (setq-default dired-omit-files-p t) ; this is buffer-local variable
  (setq dired-omit-files
        (concat dired-omit-files "\\.pyc$"))
#+END_SRC
将文件夹放到前面：
#+BEGIN_SRC emacs-lisp
  ;; (setq dired-listing-switches "-aBhl  --group-directories-first")
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Inside
#+BEGIN_SRC emacs-lisp
  (defun custom-dired-open-file-with-osx ()
    "In Dired, try to open files by osx"
    (interactive)
    (shell-command (format "open \"%s\"" (dired-get-file-for-visit))))

  (define-key dired-mode-map (kbd "O") 'custom-dired-open-file-with-osx)
  (define-key dired-mode-map (kbd "V") nil)
  (define-key dired-mode-map (kbd "E") 'wdired-change-to-wdired-mode)

  (add-hook 'view-mode-hook '(lambda () (evil-define-key 'normal view-mode-map (kbd "q") 'View-quit)))

#+END_SRC

* Outside
#+BEGIN_SRC emacs-lisp
  (defun custom-goto-recent-directory ()
    "Open recent directory with dired"
    (interactive)
    (unless recentf-mode (recentf-mode 1))
    (let ((collection
           (delete-dups
            (append (mapcar 'file-name-directory recentf-list)
                    ;; fasd history
                    (if (executable-find "fasd")
                        (split-string (shell-command-to-string "fasd -ld") "\n" t))))))
      (ivy-read "directories:" collection :action 'dired)))

  (defun custom-goto-finder-directory ()
    "Open OSX Finder path with dired"
    (interactive)
    (dired (file-name-as-directory (s-trim (shell-command-to-string "osascript -e \'tell app \"Finder\" to POSIX path of (insertion location as alias)\'")))))

  (defun custom-goto-xcode-project ()
    "Open current XCode project path with dired"
    (interactive)
    (dired (file-name-as-directory (file-name-directory (s-trim (shell-command-to-string "osascript -e 'tell application id \"com.apple.dt.Xcode\" to return path of document 1'")))))
    (magit-status))

  (defun custom-open-xcode-file ()
    "Open current XCode editing file with emacs"
    (interactive)
    (find-file (s-trim (shell-command-to-string "osascript -e 'tell application id \"com.apple.dt.Xcode\" to return path of last item of source documents'"))))

  (require 'bookmark)
  (defun custom-ido-bookmark-jump ()
    "Jump to bookmark using ido"
    (interactive)
    (let ((dir (custom-ido-get-bookmark-dir)))
      (when dir
        (find-alternate-file dir))))

  (defun custom-ido-get-bookmark-dir ()
    "Get the directory of a bookmark."
    (let* ((name (ido-completing-read "Use dir of bookmark: " (bookmark-all-names) nil t))
           (bmk (bookmark-get-bookmark name)))
      (when bmk
        (setq bookmark-alist (delete bmk bookmark-alist))
        (push bmk bookmark-alist)
        (let ((filename (bookmark-get-filename bmk)))
          (if (file-directory-p filename)
              filename
            (file-name-directory filename))))))

  (evil-leader/set-key
    "dd" 'dired-jump
    "do" 'dired-jump-other-window
    ;; "dr" 'custom-goto-recent-directory
    "dr" 'diredp-dired-recent-dirs
    "df" 'custom-goto-finder-directory
    "dx" 'custom-goto-xcode-project
    "fx" 'custom-open-xcode-file
    "dm" 'custom-ido-bookmark-jump)

#+END_SRC
