Evil genius!
Make Emacs's keymap more convenient for me.

manual: https://bytebucket.org/lyro/evil/raw/default/doc/evil.pdf

#+BEGIN_SRC emacs-lisp
  (require-package 'evil)
#+END_SRC
* which-key
evil-leader配上which-key 效果非常棒
#+BEGIN_SRC emacs-lisp
  (require-package 'which-key)
  (which-key-mode 1)
  (setq which-key-side-window-max-height 0.25)
  ;; (which-key-add-key-based-replacements
  ;;   "<SPC>f" "File"
  ;;   "<SPC>d" "Directory"
  ;;   "<SPC>b" "Buffer"
  ;;   "<SPC>bl" "Blog"
  ;;   )

#+END_SRC
* evil-leader
快捷键
M-x customize-group -> 默认触发为\，改为SPC
#+BEGIN_SRC emacs-lisp
  (require-package 'evil-leader)
  (require 'evil-leader)

  (setq evil-leader/in-all-states t)
  (setq evil-leader/leader "SPC")
  (global-evil-leader-mode)
  (evil-mode t)
  (setq evil-leader/no-prefix-mode-rx '("w3m.*-mode" "cfw:calendar-mode")) ; w3m mode needs this too!

  (defun slegetank/leader-define-key (map key def desc &rest seq)
    "Custom method to define key and add comment to which-key"
    (let ((map (unless map evil-leader--default-map))
          (fkey (concat "<SPC>" key))
          (fdesc desc)
          keyDescList)
      (while key
        (when def
          (define-key map (read-kbd-macro key) def))
        (setq key (pop seq)
              def (pop seq)
              desc (pop seq))
        (when key
          (push desc keyDescList)
          (push (concat "<SPC>" key) keyDescList)))
      (apply 'which-key-add-key-based-replacements fkey fdesc keyDescList)))

  (slegetank/leader-define-key nil
                               "f" nil "Files"
                               "ff" 'counsel-find-file "Find file"
                               "b" nil "Buffers"
                               "bb" 'ivy-switch-buffer "Switch buffer"
                               "bk" 'kill-buffer "Kill buffer"
                               "bn" 'next-buffer "Next buffer"
                               "bp" 'previous-buffer "Previous buffer"
                               "w" nil "Windows"
                               "wk" 'delete-other-windows "Kill window"
                               "ws" 'split-window-horizontally "Split window horizontally"
                               "wv" 'split-window-vertically "Split window vertically"
                               "wf" 'other-frame "Other frame"
                               "e" nil "elisp"
                               "er" 'eval-region "Eval region"
                               "eb" 'eval-buffer "Eval buffer"
                               "." 'repeat "Repeat")

  ;; q for kill-buffer, not for exit emacss
  (evil-ex-define-cmd "q" (lambda () (interactive) (kill-buffer (current-buffer))))
  ;; wq for save & kill-buffer, not for exit emacss
  (evil-ex-define-cmd "wq" (lambda () (interactive) (save-buffer) (kill-buffer (current-buffer))))
#+END_SRC

忽略C-z的emacs mode:
#+BEGIN_SRC emacs-lisp
  (evil-define-key '(normal insert visual replace operator motion) 'global (kbd "C-z") 'undo-tree-undo)
#+END_SRC

* evil-nerd-commenter
注释
#+BEGIN_SRC emacs-lisp
  (require-package 'evil-nerd-commenter)

  (evilnc-default-hotkeys)
  (global-set-key (kbd "s-/") 'evilnc-comment-or-uncomment-lines)
#+END_SRC

* evil-surround
#+BEGIN_SRC emacs-lisp
  (require-package 'evil-surround)

  (global-evil-surround-mode 1)
#+END_SRC

* evil-matchit
#+BEGIN_SRC emacs-lisp
  (require-package 'evil-matchit)

  (global-evil-matchit-mode 1)
#+END_SRC

* evil-visualstar
#+BEGIN_SRC emacs-lisp
  (require-package 'evil-visualstar)
  (global-evil-visualstar-mode)
#+END_SRC

* evil-cleverparens
#+BEGIN_SRC emacs-lisp
  (require-package 'evil-cleverparens)

  (add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)
  (setq evil-move-beyond-eol t)

  (define-key evil-visual-state-map [escape] 'evil-visual-char)
#+END_SRC

* expand-region
多次按v自动选择：
#+BEGIN_SRC emacs-lisp
  (require-package 'expand-region)
  (require 'expand-region)

  (defun evil-visual-char-or-expand-region ()
    (interactive)
    (if (region-active-p)
        (call-interactively 'er/expand-region)
      (evil-visual-char)))

  (define-key evil-normal-state-map "v" 'evil-visual-char-or-expand-region)
  (define-key evil-visual-state-map "v" 'evil-visual-char-or-expand-region)
#+END_SRC
* [macos] auto switch input source
当进入evil-normal-mode时，自动切换回英文输入法
# https://github.com/Lutzifer/keyboardSwitcher
#+BEGIN_SRC emacs-lisp
  (when (and (memq window-system '(mac ns))
             (executable-find "keyboardSwitcher"))
    (add-hook 'evil-normal-state-entry-hook
              (lambda ()
                (call-process-shell-command "keyboardSwitcher select ABC" nil 0))))
#+END_SRC
