* 未分类
未分类的包都暂时放到这里；使用package-autoremove来清理垃圾包
  #+BEGIN_SRC emacs-lisp
    (setq package-selected-packages (append package-selected-packages '(company
                                                                         company-anaconda
                                                                         company-tern
                                                                         hungry-delete
                                                                         counsel
                                                                         smartparens
                                                                         popwin
                                                                         reveal-in-osx-finder
                                                                         slime
                                                                         rainbow-delimiters
                                                                         recentf-ext
                                                                         s
                                                                         nyan-mode
                                                                         skewer-mode
                                                                         sr-speedbar
                                                                         flycheck
                                                                         yasnippet
                                                                         imenu-list
                                                                         neotree
                                                                         switch-buffer-functions
                                                                         auto-highlight-symbol
                                                                         json-mode
                                                                         simpleclip
                                                                         switch-window
                                                                         ggtags
                                                                         counsel-gtags
                                                                         irony
                                                                         company-irony
                                                                         indent-guide
                                                                         expand-region)))
  #+END_SRC

  检测所有列表里的库，如果未安装，则自动安装。
  #+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(defun slegtank/check-installed-packages ()
  (cl-loop for pkg in package-selected-packages
  when (not (package-installed-p pkg)) do (cl-return nil)
  finally (cl-return t)))

(unless (slegtank/check-installed-packages)
  (message "%s" "Some packages missed, refreshing...")
  (package-refresh-contents)
  (dolist (pkg package-selected-packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
  #+END_SRC
* 配置
** company
company的意思是complete-anything。顾名思义，它可以对用户的输入进行补全。
#+BEGIN_SRC emacs-lisp
  (global-company-mode t) ; company
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-j") #'company-select-next)
    (define-key company-active-map (kbd "C-k") #'company-select-previous))
#+END_SRC
*** company-anaconda
#+BEGIN_SRC emacs-lisp
    (add-hook 'python-mode-hook 'anaconda-mode)
    (eval-after-load "company"
    '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
#+END_SRC
*** company-tern
#+BEGIN_SRC emacs-lisp
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'rjsx-mode-hook (lambda () (tern-mode t)))
#+END_SRC
** hungry-delete
自动删除行最后的空格。
#+BEGIN_SRC emacs-lisp
  (global-hungry-delete-mode t) ; hungry delete
#+END_SRC
** smartparens
自动匹配括号、引号等。
#+BEGIN_SRC emacs-lisp
    (require 'smartparens-config)
    (smartparens-global-mode t) ; smart paren

    ;; elisp单引号不自动配对
    (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)

    ;; 括号匹配
    (defadvice show-paren-function (around fix-show-paren-function activate)
    "Highlight enclosing parens."
    (cond ((looking-at-p "\\s(") ad-do-it)
            (t (save-excursion
                (ignore-errors (backward-up-list))
                ad-do-it))))


#+END_SRC
** popwin
更好用的弹出窗口。
#+BEGIN_SRC emacs-lisp
    ;; popwin
    (require 'popwin)
    (popwin-mode t)
#+END_SRC
** reveal-in-osx-finder
C-c o 打开当前文件所在的Finder;
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "fo" 'reveal-in-osx-finder)
#+END_SRC

** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
** slime
#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+END_SRC
** nyan-mode
#+BEGIN_SRC emacs-lisp
  (nyan-mode t)
  (nyan-start-animation)
#+END_SRC
** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (require 'sr-speedbar)
  (evil-leader/set-key
    "fs" 'custom-open-speedbar)

  (defun custom-open-speedbar ()
    "Open & select & expand"
    (interactive)
    (unless (member 'speedbar-mode minor-mode-list)
      (let ((current-file (buffer-file-name)))
        (unless (sr-speedbar-exist-p)
          (sr-speedbar-open))
        (sr-speedbar-select-window)
        (speedbar-find-selected-file current-file)
        (speedbar-expand-line))))

  (define-key speedbar-key-map (kbd "<tab>") 'speedbar-toggle-line-expansion)
  (define-key speedbar-key-map (kbd "q") 'sr-speedbar-close)
  (define-key speedbar-key-map (kbd "^") 'speedbar-up-directory)
  (sr-speedbar-refresh-turn-on)
#+END_SRC
** recentf-ext
#+BEGIN_SRC emacs-lisp
  (require 'recentf-ext)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  (evil-leader/set-key
    "cn" 'flycheck-next-error
    "cp" 'flycheck-previous-error
    "cl" 'flycheck-list-errors)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC
** skewer-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'web-mode-hook 'skewer-html-mode)

#+END_SRC
** auto-highlight-symbol
#+BEGIN_SRC emacs-lisp
  (require 'auto-highlight-symbol)
  (global-auto-highlight-symbol-mode)

  (use-package auto-highlight-symbol
                                          ; this only installs it for programming mode derivatives; you can also make it global...
    :init
    (add-hook 'org-mode-hook 'auto-highlight-symbol-mode)
    (add-hook 'rjsx-mode-hook 'auto-highlight-symbol-mode)
    (add-hook 'auto-highlight-symbol-mode-hook (lambda ()
                                                 (define-key evil-normal-state-map (kbd "C-p") 'ahs-backward)
                                                 (define-key evil-normal-state-map (kbd "C-n") 'ahs-forward)))
    :config
    (setq ahs-idle-interval 1.0) ;; if you want instant highlighting, set it to 0, but I find it annoying
    (setq ahs-default-range 'ahs-range-whole-buffer) ;; highlight every occurence in buffer
    )


#+END_SRC
** simpleclip
#+BEGIN_SRC emacs-lisp
  (require 'simpleclip)
  (simpleclip-mode 1)

  (setq simpleclip-unmark-on-copy t)
#+END_SRC

在simpleclip.el中会将(setq interprogram-cut-function nil) 置为nil，而这个方法在evil-mode的x中将会调用到的simple.el中的kill-new中会用到。返回string参数即可修复x无法删除string的bug。
#+BEGIN_SRC emacs-lisp
  (defun slegetank/fix-evil-clip-not-function (oldfunc &rest args)
    (apply oldfunc args)
    (car args))

  (advice-add 'kill-new :around 'slegetank/fix-evil-clip-not-function)
#+END_SRC

** imenu-list
#+BEGIN_SRC emacs-lisp
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "<tab>") 'hs-toggle-hiding)
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "<RET>") 'imenu-list-goto-entry)
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "q") 'imenu-list-quit-window)
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "g") 'imenu-list-refresh)
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  (require 'switch-window)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" ";" "w" "e" "i" "o"))
  (setq switch-window-increase 17)
  ;; (setq switch-window-shortcut-appearance 'asciiart)
  (evil-leader/set-key
    "wo" 'switch-window)
#+END_SRC
** ggtags
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (ggtags-mode 1))))
#+END_SRC
** irony
mac上先brew install cmake，再执行下面的语句再执行M-x irony-install-server:
#+BEGIN_SRC shell
  ### create /usr/local if not there yet
  sudo mkdir -p /usr/local/lib /usr/local/include
  ### grab standard libclang
  sudo cp -p "`xcode-select --print-path`"/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib /usr/local/lib
  ### (dirty part) supplement with latest llvm clang-c includes
  cd /tmp
  svn export http://llvm.org/svn/llvm-project/cfe/trunk/include/clang-c/
  sudo cp -RP clang-c /usr/local/include
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    )
#+END_SRC
*** company-irony
#+BEGIN_SRC emacs-lisp
  (eval-after-load "company"
    '(add-to-list 'company-backends '(company-irony company-gtags)))
#+END_SRC
** indent-guide
#+BEGIN_SRC emacs-lisp
  (require 'indent-guide)
  (indent-guide-global-mode)
  ;; (setq indent-guide-delay 0.1)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (require 'expand-region)
  (global-set-key (kbd "S-<double-mouse-1>") 'er/expand-region)
#+END_SRC
