* 未分类
未分类的包都暂时放到这里；使用package-autoremove来清理垃圾包
  #+BEGIN_SRC emacs-lisp
    (setq package-selected-packages (append package-selected-packages '(use-package
                                         company
                                         company-anaconda
                                         company-tern
                                         hungry-delete
                                         swiper
                                         counsel
                                         smartparens
                                         exec-path-from-shell
                                         popwin
                                         reveal-in-osx-finder
                                         which-key
                                         slime
                                         rainbow-delimiters
                                         elpy
                                         recentf-ext
                                         s
                                         avy
                                         osx-dictionary
                                         nyan-mode
                                         skewer-mode
                                         sr-speedbar
                                         flycheck
                                         yasnippet
                                         imenu-list
                                         neotree
                                         switch-buffer-functions
                                         auto-highlight-symbol
                                         json-mode
                                         anzu
                                         evil-anzu
                                         simpleclip
                                         switch-window
                                         organic-green-theme
                                         engine-mode
                                         cnfonts
                                         ace-pinyin)))
  #+END_SRC

  检测所有列表里的库，如果未安装，则自动安装。
  #+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(defun slegtank/check-installed-packages ()
  (cl-loop for pkg in package-selected-packages
  when (not (package-installed-p pkg)) do (cl-return nil)
  finally (cl-return t)))

(unless (slegtank/check-installed-packages)
  (message "%s" "Some packages missed, refreshing...")
  (package-refresh-contents)
  (dolist (pkg package-selected-packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
  #+END_SRC
* 配置
** use-package
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key)                ;; if you use any :bind variant
#+END_SRC
** company
   company的意思是complete-anything。顾名思义，它可以对用户的输入进行补全。
   #+BEGIN_SRC emacs-lisp
     (global-company-mode t) ; company
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-j") #'company-select-next)
       (define-key company-active-map (kbd "C-k") #'company-select-previous))
   #+END_SRC
*** company-anaconda
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook 'anaconda-mode)
      (eval-after-load "company"
        '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
    #+END_SRC
*** company-tern
#+BEGIN_SRC emacs-lisp
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'jsx-mode-hook (lambda () (tern-mode t)))
#+END_SRC
** hungry-delete
   自动删除行最后的空格。
   #+BEGIN_SRC emacs-lisp
(global-hungry-delete-mode t) ; hungry delete
   #+END_SRC
** smartparens
   自动匹配括号、引号等。
   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t) ; smart paren

     ;; elisp单引号不自动配对
     (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)

     ;; 括号匹配
     (defadvice show-paren-function (around fix-show-paren-function activate)
       "Highlight enclosing parens."
       (cond ((looking-at-p "\\s(") ad-do-it)
             (t (save-excursion
                  (ignore-errors (backward-up-list))
                  ad-do-it))))


   #+END_SRC
** popwin
   更好用的弹出窗口。
   #+BEGIN_SRC emacs-lisp
;; popwin
(require 'popwin)
(popwin-mode t)
   #+END_SRC
** ace-pinyin
#+BEGIN_SRC emacs-lisp
  (require 'ace-pinyin)
  (ace-pinyin-global-mode +1)
#+END_SRC
** ivy && Swiper && counsel
   强大的查找文件、搜索代码、执行命令的补全工具。
   #+BEGIN_SRC emacs-lisp
     ;; ivy
     (ivy-mode 1)

     (setq counsel-find-file-at-point t)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy)
     (setq ivy-initial-inputs-alist nil)
     (global-set-key "\C-s" 'swiper)

     (define-key ivy-minibuffer-map (kbd "s-<return>") 'ivy-immediate-done)
     (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
     (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)

     ;; (after-load 'ivy
     ;;          (setq-default ivy-use-virtual-buffers t
     ;;                        ivy-count-format ""
     ;;                   projectile-completion-system 'ivy
     ;;                   ivy-initial-inputs-alist
     ;;                   '((counsel-M-x . "^")
     ;;                     (man . "^")
     ;;                     (woman . "^")))
   #+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "gg" 'avy-goto-char)
#+END_SRC

** exec-path-from-shell
使MacOS上的Emacs能正确的使用shell的环境变量。
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
** reveal-in-osx-finder
C-c o 打开当前文件所在的Finder;
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 'reveal-in-osx-finder)
#+END_SRC

** helm-ag
工程内搜索工具。C-c C-e编辑结果。
#+BEGIN_SRC emacs-lisp
  ;; (custom-set-variables
  ;;  '(helm-follow-mode-persistent t))

  ;; (use-package helm-ag
  ;;   :ensure t
  ;;   :config
  ;;   (define-key evil-motion-state-map (kbd "s-F") 'helm-do-ag-project-root)
  ;;   (define-key evil-motion-state-map (kbd "s-f") 'helm-do-ag-this-file)
  ;;   (define-key helm-do-ag-map (kbd "C-j") 'helm-next-line)
  ;;   (define-key helm-do-ag-map (kbd "C-k") 'helm-previous-line)
  ;;   )
#+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (which-key-mode 1)
     (setq which-key-side-window-max-height 0.25)
   #+END_SRC
** elpy
   #+BEGIN_SRC emacs-lisp
     (elpy-enable)

     (defun elpy-key-bind-method ()
       "Custom key binding"
       (define-key elpy-mode-map (kbd "s-.") 'elpy-goto-definition)
       (define-key elpy-mode-map (kbd "s->") 'elpy-goto-definition-other-window)
       (define-key elpy-mode-map (kbd "s-\,") 'pop-tag-mark)
       )

     (add-hook 'elpy-mode-hook 'elpy-key-bind-method)
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
** slime
#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+END_SRC
** osx-dictionary
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h z") 'osx-dictionary-search-pointer)
#+END_SRC
** nyan-mode
#+BEGIN_SRC emacs-lisp
  (nyan-mode t)
  (nyan-start-animation)
#+END_SRC
** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (require 'sr-speedbar)
  (evil-leader/set-key
    "fs" 'custom-open-speedbar)

  (defun custom-open-speedbar ()
    "Open & select & expand"
    (interactive)
    (unless (member 'speedbar-mode minor-mode-list)
      (let ((current-file (buffer-file-name)))
        (unless (sr-speedbar-exist-p)
          (sr-speedbar-open))
        (sr-speedbar-select-window)
        (speedbar-find-selected-file current-file)
        (speedbar-expand-line))))

  (define-key speedbar-key-map (kbd "<tab>") 'speedbar-toggle-line-expansion)
  (define-key speedbar-key-map (kbd "q") 'sr-speedbar-close)
  (define-key speedbar-key-map (kbd "^") 'speedbar-up-directory)
  (sr-speedbar-refresh-turn-on)
#+END_SRC
** recentf-ext
#+BEGIN_SRC emacs-lisp
  (require 'recentf-ext)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  (evil-leader/set-key
    "cn" 'flycheck-next-error
    "cp" 'flycheck-previous-error
    "cl" 'flycheck-list-errors)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC
** skewer-mode
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'jsx-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'web-mode-hook 'skewer-html-mode)

#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
    (require 'neotree)
    (use-package neotree
      :ensure t
      :config
      (evil-leader/set-key
        "dn"  'custom-neotree-toggle-project-dir)

      (setq neo-smart-open t)
      (setq neo-window-fixed-size nil)

      ;; (setq projectile-switch-project-action 'neotree-projectile-action)

      (add-hook 'neotree-mode-hook
                (lambda ()
                  (define-key evil-normal-state-local-map (kbd "<tab>") (neotree-make-executor :dir-fn 'neo-open-dir))
                  (define-key evil-normal-state-local-map (kbd "u") 'neotree-select-up-node)
                  (define-key evil-normal-state-local-map (kbd "v") 'neotree-quick-look)
                  (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                  (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
                  (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
                  (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                  (define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
                  (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
                  (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
                  (define-key evil-normal-state-local-map (kbd "o") (lambda () (interactive) (shell-command (format "open %s" (neo-buffer--get-filename-current-line)))))

                  (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
                  (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)

                  (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))

    (use-package find-file-in-project :ensure t)

    (defun custom-neotree-toggle-project-dir ()
      "Open NeoTree using the git root. & show imenu"
      (interactive)
      ;; (imenu-list-smart-toggle)
      (if (neo-global--window-exists-p)
          (progn (neotree-hide)
                 ;; (imenu-list-quit-window)
  )
        (let ((project-dir (or (ffip-project-root) (file-name-directory (or (buffer-file-name) ""))))
              (file-name (buffer-file-name)))
          ;; (imenu-list-show)
          (if project-dir
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name))
            (message "Buffer is invalid.")))))
#+END_SRC
** auto-highlight-symbol
#+BEGIN_SRC emacs-lisp
  (require 'auto-highlight-symbol)
  (global-auto-highlight-symbol-mode)

  (use-package auto-highlight-symbol
                                          ; this only installs it for programming mode derivatives; you can also make it global...
    :init
    (add-hook 'org-mode-hook 'auto-highlight-symbol-mode)
    (add-hook 'jsx-mode-hook 'auto-highlight-symbol-mode)
    (add-hook 'auto-highlight-symbol-mode-hook (lambda ()
                                                 (define-key evil-normal-state-map (kbd "C-p") 'ahs-backward)
                                                 (define-key evil-normal-state-map (kbd "C-n") 'ahs-forward)))
    :config
    (setq ahs-idle-interval 1.0) ;; if you want instant highlighting, set it to 0, but I find it annoying
    (setq ahs-default-range 'ahs-range-whole-buffer) ;; highlight every occurence in buffer
    )


#+END_SRC
** anzu
#+BEGIN_SRC emacs-lisp
  (global-anzu-mode +1)
#+END_SRC
** evil-anzu
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'evil
    (require 'evil-anzu))
#+END_SRC
** simpleclip
#+BEGIN_SRC emacs-lisp
  (require 'simpleclip)
  (simpleclip-mode 1)

  (setq simpleclip-unmark-on-copy t)
#+END_SRC

在simpleclip.el中会将(setq interprogram-cut-function nil) 置为nil，而这个方法在evil-mode的x中将会调用到的simple.el中的kill-new中会用到。返回string参数即可修复x无法删除string的bug。
#+BEGIN_SRC emacs-lisp
  (defun fix-evil-clip-not-function (string &optional PRED)
    string)
  (advice-add 'kill-new :after 'fix-evil-clip-not-function)
#+END_SRC

** imenu-list
#+BEGIN_SRC emacs-lisp
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "<tab>") 'hs-toggle-hiding)
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "<RET>") 'imenu-list-goto-entry)
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "q") 'imenu-list-quit-window)
    (evil-define-key 'motion imenu-list-major-mode-map (kbd "g") 'imenu-list-refresh)
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  (require 'switch-window)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" ";" "w" "e" "i" "o"))
  (setq switch-window-increase 17)
  ;; (setq switch-window-shortcut-appearance 'asciiart)
  (evil-leader/set-key
    "wo" 'switch-window)
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
;; (load-theme 'occidental t)
#+END_SRC
** engine-mode
#+BEGIN_SRC emacs-lisp
    (require 'engine-mode)
    (engine-mode t)

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine google
      "http://www.google.com.sg/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g")

    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s")

    (evil-leader/set-key
      "s" 'engine-mode-prefixed-map)
#+END_SRC
** cnfonts
#+BEGIN_SRC emacs-lisp
  (require 'cnfonts)
  ;; 让 cnfonts 随着 Emacs 自动生效。
  (cnfonts-enable)
  ;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
  (cnfonts-set-spacemacs-fallback-fonts)
#+END_SRC
