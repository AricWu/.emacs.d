这个文件用来存储所有第三方库的相关配置。

* 核心
  这里使用package包来管理第三方库。注意，25.1版本之后才具有这个强大的能力。

  1 首先，将安装源设为国内的，此处使用子龙山人提供的源：
  #+BEGIN_SRC emacs-lisp
    (when (>= emacs-major-version 24)
      (setq package-archives '(("gnu"   . "http://elpa.zilongshanren.com/gnu/")
                               ("org" . "http://orgmode.org/elpa/")
                               ("melpa" . "http://elpa.zilongshanren.com/melpa/")
                               )))
  #+END_SRC

  2 然后，将要加载的库加入package-selected-packages里。package库将使用这个变量来确认用户需要安装哪些包。
  package-autoremove也依赖于这个列表来自动删除包。注意，这个变量是在25.1之后引入的。
  #+BEGIN_SRC emacs-lisp
    (setq package-selected-packages '(use-package
                                       company
                                       company-anaconda
                                       company-tern
                                       hungry-delete
                                       swiper
                                       counsel
                                       smartparens
                                       evil
                                       evil-leader
                                       evil-nerd-commenter
                                       evil-surround
                                       evil-matchit
                                       evil-visualstar
                                       evil-mu4e
                                       exec-path-from-shell
                                       popwin
                                       reveal-in-osx-finder
                                       iedit
                                       helm-ag
                                       window-numbering
                                       which-key
                                       slime
                                       rainbow-delimiters
                                       elpy
                                       solarized-theme
                                       better-defaults
                                       dired+
                                       diredful
                                       ;; dired-icon
                                       recentf-ext
                                       s
                                       avy
                                       evil-cleverparens
                                       osx-dictionary
                                       nyan-mode
                                       magit
                                       evil-magit
                                       ;; js
                                       js2-mode
                                       web-mode
                                       rjsx-mode
                                       simple-httpd
                                       skewer-mode
                                       emmet-mode
                                       git-gutter
                                       mu4e-alert
                                       mu4e-maildirs-extension
                                       sr-speedbar
                                       flycheck
                                       yasnippet
                                       react-snippets
                                       impatient-mode
                                       imenu-list
                                       neotree
                                       switch-buffer-functions
                                       auto-highlight-symbol
                                       json-mode
                                       org-plus-contrib))
  #+END_SRC
  3 最后，检测所有列表里的库，如果未安装，则自动安装。
  #+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(defun slegtank/check-installed-packages ()
  (cl-loop for pkg in package-selected-packages
  when (not (package-installed-p pkg)) do (cl-return nil)
  finally (cl-return t)))

(unless (slegtank/check-installed-packages)
  (message "%s" "Some packages missed, refreshing...")
  (package-refresh-contents)
  (dolist (pkg package-selected-packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
  #+END_SRC
  4 当需要删除某个包时，就将package-selected-packages中的包去掉，然后调用M-x package-autoremove来自动删除包。
  当然，别忘了将下面关于包的配置手动删除。
* 包
下面是所有上面的第三方库的配置。(org mode中编辑代码时，可以使用C-c '来在一个新的buffer中进行编辑；按C-x C-s来保存;再次按C-c '来退出)
** use-package
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key)                ;; if you use any :bind variant
#+END_SRC
** better-defaults
修正Emacs默认配置的一些不合理配置。
#+BEGIN_SRC emacs-lisp
  (require 'better-defaults)
#+END_SRC
** evil
vim
manual: https://bytebucket.org/lyro/evil/raw/default/doc/evil.pdf
*** evil-leader
快捷键
M-x customize-group -> 默认触发为\，改为SPC
#+BEGIN_SRC emacs-lisp
  (require 'evil-leader)
  (setq evil-leader/in-all-states t)
  (setq evil-leader/leader "SPC")
  (global-evil-leader-mode)
  (evil-mode t)
  (setq evil-leader/no-prefix-mode-rx '("w3m.*-mode")) ; w3m mode needs this too!
  (evil-leader/set-key
    ;; file & buffer
    "ff" 'find-file
    "bb" 'switch-to-buffer
    "bk" 'kill-buffer
    "bp" 'previous-buffer
    "bn" 'next-buffer
    ;; project
    "pf" 'counsel-git
    "ps" 'helm-do-ag-project-root
    ;; window
    "0" 'select-window-0
    "1" 'select-window-1
    "2" 'select-window-2
    "3" 'select-window-3
    "wk" 'delete-other-windows
    "ws" 'split-window-horizontally
    "wv" 'split-window-vertically
    ;; elisp
    "er" 'eval-region
    "eb" 'eval-buffer
    "." 'repeat
    )

  ;; q for kill-buffer, not for exit emacss
  (evil-ex-define-cmd "q" (lambda () (interactive) (kill-buffer (current-buffer))))
  ;; wq for save & kill-buffer, not for exit emacss
  (evil-ex-define-cmd "wq" (lambda () (interactive) (save-buffer) (kill-buffer (current-buffer))))
#+END_SRC
*** evil-nerd-commenter
    注释
    #+BEGIN_SRC emacs-lisp
      (evilnc-default-hotkeys)
      (global-set-key (kbd "s-/") 'evilnc-comment-or-uncomment-lines)
    #+END_SRC
*** evil-surround
    #+BEGIN_SRC emacs-lisp
      (require 'evil-surround)
      (global-evil-surround-mode 1)
    #+END_SRC
*** evil-matchit
#+BEGIN_SRC emacs-lisp
  (require 'evil-matchit)
  (global-evil-matchit-mode 1)
#+END_SRC
*** evil-visualstar
#+BEGIN_SRC emacs-lisp
  (global-evil-visualstar-mode)
#+END_SRC
*** evil-mu4e
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'mu4e
    (require 'evil-mu4e)
    )
#+END_SRC
** company
   company的意思是complete-anything。顾名思义，它可以对用户的输入进行补全。
   #+BEGIN_SRC emacs-lisp
     (global-company-mode t) ; company
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-j") #'company-select-next)
       (define-key company-active-map (kbd "C-k") #'company-select-previous))
   #+END_SRC
*** company-anaconda
    #+BEGIN_SRC emacs-lisp
      (add-hook 'python-mode-hook 'anaconda-mode)
      (eval-after-load "company"
        '(add-to-list 'company-backends '(company-anaconda :with company-capf)))
    #+END_SRC
*** company-tern
#+BEGIN_SRC emacs-lisp
  (add-to-list 'company-backends 'company-tern)
  (add-hook 'rjsx-mode-hook (lambda () (tern-mode t)))
#+END_SRC
** hungry-delete
   自动删除行最后的空格。
   #+BEGIN_SRC emacs-lisp
(global-hungry-delete-mode t) ; hungry delete
   #+END_SRC
** smartparens
   自动匹配括号、引号等。
   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t) ; smart paren

     ;; elisp单引号不自动配对
     (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)

     ;; 括号匹配
     (defadvice show-paren-function (around fix-show-paren-function activate)
       "Highlight enclosing parens."
       (cond ((looking-at-p "\\s(") ad-do-it)
             (t (save-excursion
                  (ignore-errors (backward-up-list))
                  ad-do-it))))


   #+END_SRC
** popwin
   更好用的弹出窗口。
   #+BEGIN_SRC emacs-lisp
;; popwin
(require 'popwin)
(popwin-mode t)
   #+END_SRC
** ivy && Swiper && counsel
   强大的查找文件、搜索代码、执行命令的补全工具。
   #+BEGIN_SRC emacs-lisp
     ;; ivy
     (ivy-mode 1)

     (setq counsel-find-file-at-point t)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy)
     (setq ivy-initial-inputs-alist nil)

     (define-key ivy-minibuffer-map (kbd "s-<return>") 'ivy-immediate-done)
     (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-next-line)
     (define-key ivy-minibuffer-map (kbd "C-k") 'ivy-previous-line)

     ;; (after-load 'ivy
     ;;          (setq-default ivy-use-virtual-buffers t
     ;;                        ivy-count-format ""
     ;;                   projectile-completion-system 'ivy
     ;;                   ivy-initial-inputs-alist
     ;;                   '((counsel-M-x . "^")
     ;;                     (man . "^")
     ;;                     (woman . "^")))
   #+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'avy-goto-char-timer)

  (evil-leader/set-key "gg" 'avy-goto-char-timer)
#+END_SRC

** exec-path-from-shell
使MacOS上的Emacs能正确的使用shell的环境变量。
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
** reveal-in-osx-finder
C-c o 打开当前文件所在的Finder;
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 'reveal-in-osx-finder)
#+END_SRC

** iedit
多处编辑; C-;激活，C-'只显示高亮行
#+BEGIN_SRC emacs-lisp
  (require 'iedit)
#+END_SRC
** helm-ag
工程内搜索工具。C-c C-e编辑结果。
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(helm-follow-mode-persistent t))

  (use-package helm-ag
    :ensure t
    :config
    (define-key evil-motion-state-map (kbd "s-F") 'helm-do-ag-project-root)
    (define-key evil-motion-state-map (kbd "s-f") 'helm-do-ag-this-file)
    (define-key helm-do-ag-map (kbd "C-j") 'helm-next-line)
    (define-key helm-do-ag-map (kbd "C-k") 'helm-previous-line)
    )
#+END_SRC
** window-numbering
#+BEGIN_SRC emacs-lisp
   (window-numbering-mode 1)
#+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (which-key-mode 1)
     (setq which-key-side-window-max-height 0.25)
   #+END_SRC
** elpy
   #+BEGIN_SRC emacs-lisp
     (elpy-enable)

     (defun elpy-key-bind-method ()
       "Custom key binding"
       (define-key elpy-mode-map (kbd "s-.") 'elpy-goto-definition)
       (define-key elpy-mode-map (kbd "s->") 'elpy-goto-definition-other-window)
       (define-key elpy-mode-map (kbd "s-\,") 'pop-tag-mark)
       )

     (add-hook 'elpy-mode-hook 'elpy-key-bind-method)
   #+END_SRC
** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
** slime
   #+BEGIN_SRC emacs-lisp
(setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
 (setq slime-contribs '(slime-fancy))
   #+END_SRC
** evil-cleverparens
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)
  (setq evil-move-beyond-eol t)

  (defun evil-visual-char-or-expand-region ()
    (interactive)
    (if (region-active-p)
          (call-interactively 'er/expand-region)
      (evil-visual-char)))

  (define-key evil-normal-state-map "v" 'evil-visual-char-or-expand-region)
  (define-key evil-visual-state-map "v" 'evil-visual-char-or-expand-region)
  (define-key evil-visual-state-map [escape] 'evil-visual-char)
#+END_SRC
** osx-dictionary
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h z") 'osx-dictionary-search-pointer)
#+END_SRC
** nyan-mode
#+BEGIN_SRC emacs-lisp
  (nyan-mode t)
  (nyan-start-animation)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (require 'evil-magit)
  (evil-leader/set-key
    "gs" 'magit-status
    "gm" 'magit-dispatch-popup)
#+END_SRC
** emmet-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode)
#+END_SRC
** git-gutter
#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode +1)
#+END_SRC
** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (require 'sr-speedbar)
  (evil-leader/set-key
    "fs" 'custom-open-speedbar)

  (defun custom-open-speedbar ()
    "Open & select & expand"
    (interactive)
    (unless (member 'speedbar-mode minor-mode-list)
      (let ((current-file (buffer-file-name)))
        (unless (sr-speedbar-exist-p)
          (sr-speedbar-open))
        (sr-speedbar-select-window)
        (speedbar-find-selected-file current-file)
        (speedbar-expand-line))))

  (define-key speedbar-key-map (kbd "<tab>") 'speedbar-toggle-line-expansion)
  (define-key speedbar-key-map (kbd "q") 'sr-speedbar-close)
  (define-key speedbar-key-map (kbd "^") 'speedbar-up-directory)
  (sr-speedbar-refresh-turn-on)
#+END_SRC
** recentf-ext
#+BEGIN_SRC emacs-lisp
  (require 'recentf-ext)
#+END_SRC
** mu4e-alert
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'mu4e
    ;; (mu4e-alert-set-default-style 'notifier)
    ;; (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (setq mu4e-alert-interesting-mail-query "flag:unread maildir:/shuai.zhao@linkplay.com/INBOX"))

#+END_SRC

** mu4e-maildirs-extension
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'mu4e
    (require 'mu4e-maildirs-extension)
    (mu4e-maildirs-extension)
    (evil-define-key 'motion mu4e-main-mode-map (kbd "<tab>") 'mu4e-maildirs-extension-toggle-maildir-at-point))

    ;;(setq mu4e-maildirs-extension-custom-list '("/slege_tank@163.com/INBOX"))
    ;;(setq mu4e-maildirs-extension-default-collapse-level 2)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")

  (evil-leader/set-key
    "cn" 'flycheck-next-error
    "cp" 'flycheck-previous-error
    "cl" 'flycheck-list-errors)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC
*** react
#+BEGIN_SRC emacs-lisp
  (require 'react-snippets)
#+END_SRC
** skewer-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'rjsx-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'web-mode-hook 'skewer-html-mode)

#+END_SRC
** impatient-mode
#+BEGIN_SRC emacs-lisp
  ;; (require 'impatient-mode)

  ;; (add-hook 'web-mode-hook 'impatient-mode)

  ;; (defun custom-browse-this-file-impatient ()
  ;;   (interactive)
  ;;   (if (s-ends-with? ".html" (buffer-file-name))
  ;;       (progn (unless (process-status "httpd")
  ;;                (httpd-start))
  ;;              (imp-visit-buffer))
  ;;     (message "Not a valide html file.")))

#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  (use-package neotree
    :ensure t
    :config
    (evil-leader/set-key
      "dn"  'custom-neotree-toggle-project-dir)

    (setq neo-smart-open t)

    ;; (setq projectile-switch-project-action 'neotree-projectile-action)

    (add-hook 'neotree-mode-hook
              (lambda ()
                (define-key evil-normal-state-local-map (kbd "<tab>") (neotree-make-executor :dir-fn 'neo-open-dir))
                (define-key evil-normal-state-local-map (kbd "u") 'neotree-select-up-node)
                (define-key evil-normal-state-local-map (kbd "v") 'neotree-quick-look)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
                (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
                (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                (define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
                (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
                (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
                (define-key evil-normal-state-local-map (kbd "o") (lambda () (interactive) (shell-command (format "open %s" (neo-buffer--get-filename-current-line)))))

                (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
                (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)

                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))

  (use-package find-file-in-project :ensure t)

  (defun custom-neotree-toggle-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (if (neo-global--window-exists-p)
        (neotree-hide)
      (let ((project-dir (or (ffip-project-root) (file-name-directory (or (buffer-file-name) ""))))
            (file-name (buffer-file-name)))
        (if project-dir
            (progn
              (neotree-dir project-dir)
              (neotree-find file-name))
          (message "Buffer is invalid.")))))
#+END_SRC
** auto-highlight-symbol
#+BEGIN_SRC emacs-lisp
  (require 'auto-highlight-symbol)
  (global-auto-highlight-symbol-mode)

  (use-package auto-highlight-symbol
                                          ; this only installs it for programming mode derivatives; you can also make it global...
    :init
    (add-hook 'org-mode-hook 'auto-highlight-symbol-mode)
    (add-hook 'rjsx-mode-hook 'auto-highlight-symbol-mode)
    (add-hook 'auto-highlight-symbol-mode-hook (lambda ()
                                                 (define-key evil-normal-state-map (kbd "C-p") 'ahs-backward)
                                                 (define-key evil-normal-state-map (kbd "C-n") 'ahs-forward)))
    :config
    (setq ahs-idle-interval 1.0) ;; if you want instant highlighting, set it to 0, but I find it annoying
    (setq ahs-default-range 'ahs-range-whole-buffer) ;; highlight every occurence in buffer
    )


#+END_SRC
