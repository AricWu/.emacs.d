* helper
#+BEGIN_SRC emacs-lisp
  (setq custom-help-local-dir "/Users/hy/Work/github/MyBlogOrg/blog/")
  (setq custom-help-remote-url "http://blog.slegetank.com/article/%s?blogtype=%s")


  (setq custom-help-article-list '(("blog" "20170108-blogWithEmacs.org" "Emacs")
                                   ("dired" "20170106-dired.org" "Emacs")
                                   ("tramp" "20170318-tramp.org" "Emacs")
                                   ("magit" "20170206-magit.org" "Emacs")
                                   ("s" "https://github.com/magnars/s.el" "Emacs")
                                   ("RN-github" "https://github.com/jondot/awesome-react-native" "RN")
                                   ("emmet" "https://github.com/smihica/emmet-mode" "js")
                                   ("material-ui" "http://www.material-ui.com/#/" "react")
                                   ))

  (defun custom-help-open-article (remote)
    "Open help article for some topic"
    (interactive)
    (let* ((info (ivy-completing-read (if (equal remote "remote") "Open remote topic: " "Open local topic: ") custom-help-article-list nil t))
           (name (car (cdr (assoc info custom-help-article-list))))
           (type (car (nthcdr 2 (assoc info custom-help-article-list)))))
      (if (s-starts-with? "http" name)
          (browse-url name)
        (if (equal remote "remote")
            (let ((remoteurl (format custom-help-remote-url name type)))
              (browse-url remoteurl))
          (if (file-exists-p custom-help-local-dir)
              (progn (shell-command (format "cd %s && git fetch && git rebase" custom-help-local-dir))
                     (find-file (concat custom-help-local-dir name)))
            (message (format "Found no help article! %s" custom-help-article-list)))))))

  (defun custom-help-open-local-article ()
    "Open local help article"
    (interactive)
    (custom-help-open-article "local"))

  (defun custom-help-open-remote-article ()
    "Open remote help article"
    (interactive)
    (custom-help-open-article "remote"))
#+END_SRC

* notes
#+BEGIN_SRC emacs-lisp
  (defun custom-note-init (filename)
    "Init a note."
    (interactive (list (read-string (format "Enter new note name: %s%s-" default-directory  (format-time-string "%Y%m%d" (current-time))))))
    (if (string= "" filename)
        (message "Need a filename")
      (or (string-match "\\.org$" filename) (setq filename (concat (file-name-sans-extension filename) ".org")))
      (progn (setq filepath (format "%s%s-%s" default-directory (format-time-string "%Y%m%d" (current-time)) filename))
             (find-file filepath)
             (let ((custom-org-buffer (get-file-buffer filepath))
                   (user-name (s-trim-right (shell-command-to-string "git config --global user.name") ))
                   (user-email (s-trim-right (shell-command-to-string "git config --global user.email") )))
               (with-current-buffer custom-org-buffer
                 (insert (format "#+TITLE: \n#+AUTHOR: %s\n#+EMAIL: %s\n#+DATE: %s\n" user-name user-email (format-time-string "<%Y-%m-%d %H:%M>" (current-time))))
                 (goto-char 9))))))
#+END_SRC

* keys
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "hl" 'custom-help-open-local-article
    "hr" 'custom-help-open-remote-article
    "hn" 'custom-note-init)
#+END_SRC
