* helper
用于记录并快速访问自己平常的一些记录：
#+BEGIN_SRC emacs-lisp
  (setq custom-help-local-dir "/Users/hy/Work/github/MyBlogOrg/blog/")
  (setq custom-help-remote-url "http://blog.slegetank.com/article/%s?blogtype=%s")


  (setq custom-help-article-list '(("blog" "20170108-blogWithEmacs.org" "Emacs")
                                   ("dired" "20170106-dired.org" "Emacs")
                                   ("tramp" "20170318-tramp.org" "Emacs")
                                   ("magit" "20170206-magit.org" "Emacs")
                                   ("s" "https://github.com/magnars/s.el" "Emacs")
                                   ("RN-github" "https://github.com/jondot/awesome-react-native" "RN")
                                   ("emmet" "https://github.com/smihica/emmet-mode" "js")
                                   ("material-ui" "http://www.material-ui.com/#/" "react")
                                   ))

  (defun custom-help-open-article (remote)
    "Open help article for some topic"
    (interactive)
    (let* ((info (ivy-completing-read (if (equal remote "remote") "Open remote topic: " "Open local topic: ") custom-help-article-list nil t))
           (name (car (cdr (assoc info custom-help-article-list))))
           (type (car (nthcdr 2 (assoc info custom-help-article-list)))))
      (if (s-starts-with? "http" name)
          (browse-url name)
        (if (equal remote "remote")
            (let ((remoteurl (format custom-help-remote-url name type)))
              (browse-url remoteurl))
          (if (file-exists-p custom-help-local-dir)
              (progn (shell-command (format "cd %s && git fetch && git rebase" custom-help-local-dir))
                     (find-file (concat custom-help-local-dir name)))
            (message (format "Found no help article! %s" custom-help-article-list)))))))

  (defun custom-help-open-local-article ()
    "Open local help article"
    (interactive)
    (custom-help-open-article "local"))

  (defun custom-help-open-remote-article ()
    "Open remote help article"
    (interactive)
    (custom-help-open-article "remote"))
#+END_SRC

* melpa-upstream-visit
快速访问包的主页
#+BEGIN_SRC emacs-lisp
    (require-package 'melpa-upstream-visit)

    (defun slegetank/melpa-upstream-visit ()
      "Though muv has already supplied thing-at-point, but there's a problem for the listp code in org-mode: `thing-at-point in org returns diff from in el. So I have to do it myself for better exp."
      (interactive)
      (when (< (length package-archive-contents) 1000)
        (package-refresh-contents))
      (let* ((packages (mapcar (lambda (el)
                                 (symbol-name (car el)))
                               package-archive-contents))
             (p-at-point
              ;; xah-get-thing is better
              (if (fboundp 'xah-get-thing-at-point)
                  (xah-get-thing-at-point 'word)
                (thing-at-point 'word)))

             (package-name (ivy-completing-read "Access home of package: " packages nil t p-at-point)))
        (muv package-name)))

    (slegetank/leader-define-key nil "hp" 'slegetank/melpa-upstream-visit "Find package's homepage")
#+END_SRC

* command-log-mode
#+BEGIN_SRC emacs-lisp
  (require-package 'command-log-mode)
  (use-package command-log-mode
    :commands global-command-log-mode
    :init
    (slegetank/leader-define-key nil "hc" 'global-command-log-mode "Show keystroke realtime")
    :config
    (setq clm/log-command-exceptions* (append clm/log-command-exceptions*
                                              '(evil-next-line
                                                evil-previous-line
                                                evil-forward-char
                                                evil-backward-char
                                                ivy-next-line
                                                ivy-previous-line))
          command-log-mode-auto-show t))
#+END_SRC
* translate
调用osx字典
#+BEGIN_SRC emacs-lisp
  (require-package  'osx-dictionary)
  (slegetank/leader-define-key nil "ht" 'osx-dictionary-search-input "Dictionary")
#+END_SRC
* devdocs
#+BEGIN_SRC emacs-lisp
  (require-package 'devdocs)
  (slegetank/leader-define-key nil "hd" 'devdocs-search "dev docs")
#+END_SRC
* keys
#+BEGIN_SRC emacs-lisp
  (slegetank/leader-define-key nil "h" nil "Help"
                               "hl" 'custom-help-open-local-article "Local help"
                               "hr" 'custom-help-open-remote-article "Remote help")
#+END_SRC
