#+BEGIN_SRC emacs-lisp
  (require-package 'counsel-projectile)
#+END_SRC

* packages
** counsel-projectile
#+BEGIN_SRC emacs-lisp
  (require 'counsel-projectile)
  (add-to-list 'projectile-globally-ignored-files "bundle.js")
  (add-to-list 'grep-find-ignored-files "bundle.js")
  (counsel-projectile-on)
#+END_SRC

* notes
#+BEGIN_SRC emacs-lisp
  (defun custom-note-init (filename)
    "Init a note."
    (interactive (list (read-string (format "Enter new note name: %s%s-" default-directory  (format-time-string "%Y%m%d" (current-time))))))
    (if (string= "" filename)
        (message "Need a filename")
      (or (string-match "\\.org$" filename) (setq filename (concat (file-name-sans-extension filename) ".org")))
      (progn (setq filepath (format "%s%s-%s" default-directory (format-time-string "%Y%m%d" (current-time)) filename))
             (find-file filepath)
             (let ((custom-org-buffer (get-file-buffer filepath))
                   (user-name (s-trim-right (shell-command-to-string "git config --global user.name") ))
                   (user-email (s-trim-right (shell-command-to-string "git config --global user.email") )))
               (with-current-buffer custom-org-buffer
                 (insert (format "#+TITLE: \n#+AUTHOR: %s\n#+EMAIL: %s\n#+DATE: %s\n" user-name user-email (format-time-string "<%Y-%m-%d %H:%M>" (current-time))))
                 (goto-char 9))))))
#+END_SRC
* keys
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "pf" 'counsel-projectile-find-file
    "pd" 'counsel-projectile-find-dir
    "ps" 'counsel-projectile-ag
    "pb" 'counsel-projectile-switch-to-buffer
    "pp" 'counsel-projectile-switch-project
    "pn" 'custom-note-init)
#+END_SRC

