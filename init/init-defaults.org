* defaults
处理emacs自带的备份文件。备份文件大多数情况下并没有用而且很烦人。但这是有意义的--我被这救过。不当的操作导致当前的buffer被覆盖，并且保存到了硬盘上。这时才明白，backup有多重要。
#+BEGIN_SRC emacs-lisp
  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; not good choice
  ;; (setq make-backup-files nil)
#+END_SRC

保存文件的编辑位置。
#+BEGIN_SRC emacs-lisp
  ;; Save point position between sessions
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; 隐藏行号 会导致org mode编辑代码卡顿
  (global-linum-mode 0)

  ;; 暂时显示行号
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (linum-mode 1)
          (goto-line (read-number "Goto line: ")))
      (linum-mode -1)))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; title show full path
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  ;; 高亮当前行
  (global-hl-line-mode 1)

  ;; 选中删除
  (delete-selection-mode 1)

  ;; max size
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; 更改光标的样式
  (setq-default cursor-type 'bar)

  ;; 关闭启动帮助画面
  (setq inhibit-splash-screen 1)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
  ;; (setq initial-buffer-choice "~/")

  ;; 更改显示字体大小 16pt
  ;; http://stackoverflow.com/questions/294664/how-to-set-the-font-size-in-emacs
  ;; (set-face-attribute 'default nil :height 140)

  (setq ring-bell-function 'ignore)

  ;; 更好的滚动
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)

  ;; yes/no -> y/n
  (fset 'yes-or-no-p 'y-or-n-p)

    ;;; dired
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)

  (put 'dired-find-alternate-file 'disabled nil)
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

#+END_SRC
** trailing space
#+BEGIN_SRC emacs-lisp
  ;; Show trailing whitespace
  (require 'whitespace)
  (setq-default show-trailing-whitespace t)
#+END_SRC

有些模式下不需要显示末尾的空格
#+BEGIN_SRC emacs-lisp
  (defun no-trailing-whitespace ()
    (setq show-trailing-whitespace nil))
  (add-hook 'minibuffer-setup-hook
            'no-trailing-whitespace)
  (add-hook 'eww-mode-hook
            'no-trailing-whitespace)
  (add-hook 'ielm-mode-hook
            'no-trailing-whitespace)
  (add-hook 'gdb-mode-hook
            'no-trailing-whitespace)
  (add-hook 'help-mode-hook
            'no-trailing-whitespace)
#+END_SRC
* keys
#+BEGIN_SRC emacs-lisp
  ;; C-c d打开当前文件的dired
  (require 'dired-x)
  (global-set-key (kbd "C-c d") 'dired-jump)

  (define-key 'help-command (kbd "C-k") 'find-function-on-key)
  (define-key 'help-command (kbd "C-v") 'find-variable)
  (define-key 'help-command (kbd "C-f") 'find-function)
#+END_SRC
