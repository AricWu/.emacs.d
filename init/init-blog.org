* Constants
首先定义常量：
#+BEGIN_SRC emacs-lisp
  (setq my-blog-post-base "~/Work/github/MyBlogOrg") ; 源文件路径
  (setq my-blog-publish-base  "~/Work/github/slegetank.github.io") ; 博客生成路径
#+END_SRC

* Main
定义一些导出时要用到的变量及函数：
#+BEGIN_SRC emacs-lisp
  (defun my-blog-home-header (arg)
    "插入到每个生成的网页的头部"
    (with-temp-buffer
      (insert-file-contents (concat my-blog-post-base "/template/homeheader.html"))
      (buffer-string)))

  (defun my-blog-header (arg)
    "插入到每个生成的网页的头部"
    (with-temp-buffer
      (insert-file-contents (concat my-blog-post-base "/template/header.html"))
      (buffer-string)))

  ;; 插入到每个生成的网页的尾部
  (setq my-blog-footer
        "<hr />\n
                  <p>License: <a href= \"https://creativecommons.org/licenses/by-sa/4.0/\">CC BY-SA 4.0</a></p>\n
                  <p><a href= \"mailto:slegetank@163.com\"> Contact</a></p>\n")
#+END_SRC

导出参数的配置：
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/org-mode/contrib/lisp/")
    (require 'ox-html)
    (require 'ox-publish)
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))
    (setq org-publish-project-alist
          `(
            ("blog-home"
             :base-directory ,my-blog-post-base
             :base-extension "org"
             :publishing-directory ,my-blog-publish-base
             :publishing-function (org-html-publish-to-html)
             :with-author t
             :with-creator nil
             :sitemap-filename "index.org"
             :sitemap-title "index"
             :sitemap-sort-files anti-chronologically
             :html-preamble my-blog-home-header
             :html-postamble ,my-blog-footer
             :sitemap-function my-blog-sitemap
             :recursive t
             :section-numbers nil
             :with-toc nil
             :with-drawers t
             :html-head-include-default-style nil
             :html-head-include-scripts nil
             ;; :html-link-home "/"
             :html-head nil ;; cleans up anything that would have been in there.
             :html-head-include-default-style nil
             :html-head-include-scripts nil
             :html-viewport nil
             :with-sub-superscript nil
             :exclude "blog/*.*\\|README.org\\|draft/*.*"
             )
            ("blog-content"
             :base-directory ,(concat my-blog-post-base "/blog")
             :base-extension "org"
             :publishing-directory ,(concat my-blog-publish-base "/blog")
             :publishing-function (org-html-publish-to-html)
             ;; :preparation-function my-blog-articles-preprocessor
             ;; :completion-function my-blog-articles-postprocessor
             :with-author t
             :with-creator nil
             :html-preamble my-blog-header
             :html-postamble ,my-blog-footer
             :recursive t
             :section-numbers nil
             :with-toc nil
             :with-drawers t
             :html-head-include-default-style nil
             :html-head-include-scripts nil
             ;; :html-link-home "/"
             :html-head nil ;; cleans up anything that would have been in there.
             :html-head-include-default-style nil
             :html-head-include-scripts nil
             :html-viewport nil
             :with-sub-superscript nil)
            ("blog-static"
             :base-directory ,(concat my-blog-post-base "/static")
             :base-extension "gif\\|png\\|jpg\\|css"
             :publishing-directory ,(concat my-blog-publish-base "/static")
             :recursive t
             :publishing-function org-publish-attachment)
            ("blog"
             :components ("blog-home" "blog-content" "blog-static"))))
#+END_SRC

* Export
** Keys
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "bc" 'custom-blog-commit
    "bi" 'custom-blog-init
    "bp" 'custom-blog-publish
    "bd" 'custom-blog-deploy)
#+END_SRC

** Functions
自定义获取博客预览内容的函数，即一个"#+BEGIN_COMMENT PREVIEW...#+END_COMMENT"块之间的内容。用comment块的原因是这些内容将会在org导出的时候被忽略掉：
#+BEGIN_SRC emacs-lisp
  (defun my-blog-get-custom-property (file)
    "获得每篇博客的自定义属性"
    (let* ((org-inhibit-startup t)
           (tempbuffer (find-file file))
           (preview-str "")
           (type ""))

      (with-current-buffer tempbuffer
        ;; preview
        (goto-char (point-min))
        (when (re-search-forward "^#\\+BEGIN_COMMENT PREVIEW$" nil t)
          (goto-char (point-min))
          (let ((beg (+ 1 (re-search-forward "^#\\+BEGIN_COMMENT PREVIEW$")))
                (end (progn (re-search-forward "^#\\+END_COMMENT")
                            (match-beginning 0))))

            (setq preview-str (buffer-substring beg end))))
        ;; property
        (let ((org-properties (org-element-map (org-element-parse-buffer 'element) 'keyword
                                (lambda (keyword) (cons (org-element-property :key keyword)
                                                        (org-element-property :value keyword))))))
          (setq type (or (cdr (assoc "BLOGTYPE" org-properties)) "")))
        (kill-buffer tempbuffer))

      `(("preview" . ,preview-str) ("type" . ,type))))
#+END_SRC

读取目录下博客org文件的信息：
#+BEGIN_SRC emacs-lisp
  (defun my-blog-org-files-info (project)
    "Generate info list for org files"
    (let* ((project-plist (cdr project))
           (files (org-publish-get-base-files project "README.org\\|draft/*.*"))
           (sitemap-sans-extension (plist-get project-plist :sitemap-sans-extension))
           (postdir (file-name-as-directory (plist-get project-plist :base-directory)))
           file
           (infolist '()))
      (while (setq file (pop files))
        (unless (or (s-ends-with? "index.org" (file-truename file)) (s-ends-with? "archive.org" (file-truename file)) (s-ends-with? "tag.org" (file-truename file)))
          (let ((link (file-relative-name file (file-name-as-directory
                                                (expand-file-name (file-name-as-directory postdir))))))
            (when sitemap-sans-extension
              (setq link (file-name-sans-extension link)))
            (let* ((title (org-publish-format-file-entry "%t" file project-plist))
                   (date (org-publish-format-file-entry "%d" file project-plist))
                   (regexp "\\(.*\\)\\[\\([^][]+\\)\\]\\(.*\\)")
                   (properties (my-blog-get-custom-property file))

                   (preview (cdr (assoc "preview" properties)))
                   (type (cdr (assoc "type" properties)))
                   )
              (setq infolist (cons `(("link" . ,(or link "")) ("title" . ,(or title "")) ("date" . ,(or date "")) ("preview" . ,(or preview "")) ("type" . ,(or type ""))) infolist))))))
      infolist))
#+END_SRC

自定义sitemap生成函数：
#+BEGIN_SRC emacs-lisp
    (defun my-blog-sitemap (project &optional sitemap-filename)
      "Sitemap custom method"
      (let* ((project-plist (cdr project))
             (postdir (file-name-as-directory (plist-get project-plist :base-directory)))
             (sitemap-filename (concat postdir (or sitemap-filename "index.org")))
             (visiting (find-buffer-visiting sitemap-filename))
             (bloginfos (my-blog-org-files-info project))
             (regexp "\\(.*\\)\\[\\([^][]+\\)\\]\\(.*\\)")
             sitemap-buffer)

        (my-blog-archive project bloginfos)
        (let ((org-inhibit-startup t))
          (setq sitemap-buffer
                (or visiting (find-file sitemap-filename)))
          (with-current-buffer sitemap-buffer
            (erase-buffer)

            (while (setq bloginfo (pop bloginfos))
              (let* ((link (cdr (assoc "link" bloginfo)))
                     (title (cdr (assoc "title" bloginfo)))
                     (date (cdr (assoc "date" bloginfo)))
                     (preview (cdr (assoc "preview" bloginfo)))
                     (type (cdr (assoc "type" bloginfo))))

                (insert "-----\n")
                (cond ((string-match-p regexp title)
                       (string-match regexp title)
                       ;; insert every post as headline
                       (insert (concat"* " (match-string 1 title)
                                      "[[file:" link "]["
                                      (match-string 2 title)
                                      "]]" (match-string 3 title) "\n")))
                      (t (insert (concat "* [[file:" link "][" title "]]\n"))))
                (let ((rss-permalink (concat (file-name-sans-extension link) ".html"))
                      (rss-pubdate date))
                  (org-set-property "RSS_PERMALINK" rss-permalink)
                  (org-set-property "PUBDATE" rss-pubdate))

                (insert (format "%s | %s\n\n" date type))
                (insert preview)
                (insert (concat "[[file:" link "][Read More...]]\n"))))

            ;; kill the first hrule to make this look OK
            (goto-char (point-min))
            (let ((kill-whole-line t)) (kill-line))
            ;; add some header
            (insert "#+SETUPFILE: ~/.emacs.d/org-template/level-0.org\n")
            (insert "#+TITLE:Slegetank's Blog\n")
            (insert "#+HTML_HEAD: <style type=\"text/css\">.title{display:none;}</style>\n\n")
            (save-buffer)))
        (or visiting (kill-buffer sitemap-buffer)))
  )
#+END_SRC

自定义archive生成函数：
#+BEGIN_SRC emacs-lisp
  (defun my-blog-archive (project bloginfos)
    "Archive custom method"
    (let* ((project-plist (cdr project))
           (postdir (file-name-as-directory (plist-get project-plist :base-directory)))
           (regexp "\\(.*\\)\\[\\([^][]+\\)\\]\\(.*\\)")
           archive-buffer
           typelist '()
           datelist '())

      (dotimes (index (length bloginfos) nil)
        (let* ((bloginfo (car (nthcdr index bloginfos)))
               (date (cdr (assoc "date" bloginfo)))
               (year (car (s-split-words date)))
               (type (cdr (assoc "type" bloginfo))))

          (let ((yearlist (assoc year datelist)))
            (if yearlist
                (progn (setq datelist (delq (assoc year datelist) datelist))
                       (add-to-list 'datelist `(,year . ,(cons index (cdr yearlist)))))
              (setq datelist (acons year (cons index '()) datelist))))

          (let ((templist (assoc type typelist)))
            (if templist
                (progn (setq typelist (delq (assoc type typelist) typelist))
                       (add-to-list 'typelist `(,type . ,(cons index (cdr templist)))))
              (setq typelist (acons type (cons index '()) typelist))))
          ))

      (let ((org-inhibit-startup t))
        (with-current-buffer (find-file (concat postdir "archive.org"))
          (erase-buffer)

          (dolist (year (reverse datelist) nil)
            (insert "\n")
            (insert (concat "* " (car year)))
            (insert "\n")
            (dolist (index (reverse (cdr year)) nil)
              (let* ((bloginfo (car (nthcdr index bloginfos)))
                     (title (cdr (assoc "title" bloginfo)))
                     (date (cdr (assoc "date" bloginfo)))
                     (link (cdr (assoc "link" bloginfo))))
                (cond ((string-match-p regexp title)
                       (string-match regexp title)
                       (insert (concat"** " (match-string 1 title)
                                      "[[file:" link "]["
                                      (match-string 2 title)
                                      "]]" (match-string 3 title) "\n")))
                      (t (insert (concat "** [[file:" link "][" date " " title "]]\n"))))
                )))

          (goto-char (point-min))
          (let ((kill-whole-line t)) (kill-line))
          (insert "#+SETUPFILE: ~/.emacs.d/org-template/level-0.org\n")
          (insert "#+TITLE:Slegetank's Blog\n")
          (insert "#+HTML_HEAD: <style type=\"text/css\">.title{display:none;}</style>\n\n")
          (save-buffer)
          (kill-buffer)))

      (let ((org-inhibit-startup t))
        (with-current-buffer (find-file (concat postdir "tag.org"))
          (erase-buffer)

          (dolist (type (reverse typelist) nil)
            (insert "\n")
            (insert (concat "* " (car type)))
            (insert "\n")
            (dolist (index (reverse (cdr type)) nil)
              (let* ((bloginfo (car (nthcdr index bloginfos)))
                     (title (cdr (assoc "title" bloginfo)))
                     (date (cdr (assoc "date" bloginfo)))
                     (link (cdr (assoc "link" bloginfo))))
                (cond ((string-match-p regexp title)
                       (string-match regexp title)
                       (insert (concat"** " (match-string 1 title)
                                      "[[file:" link "]["
                                      (match-string 2 title)
                                      "]]" (match-string 3 title) "\n")))
                      (t (insert (concat "** [[file:" link "][" date " " title "]]\n"))))
                )))

          (goto-char (point-min))
          (let ((kill-whole-line t)) (kill-line))
          (insert "#+SETUPFILE: ~/.emacs.d/org-template/level-0.org\n")
          (insert "#+TITLE:Slegetank's Blog\n")
          (insert "#+HTML_HEAD: <style type=\"text/css\">.title{display:none;}</style>\n\n")
          (save-buffer)
          (kill-buffer)))
      ))
#+END_SRC

* Edit
** Keys
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<s-right>") (lambda () (interactive) (custom-blog-modify-type 1)))
  (define-key org-mode-map (kbd "<s-left>") (lambda () (interactive) (custom-blog-modify-type -1)))

  (evil-leader/set-key
    "bu" 'custom-blog-timestamp-update)
#+END_SRC

** Functions
自定义时间戳更新方法：
#+BEGIN_SRC emacs-lisp
  (defun custom-blog-timestamp-update ()
    (interactive)
    (with-current-buffer (current-buffer)
      (goto-char (point-min))
      (search-forward-regexp "^#\\+DATE:.*?$")
      (replace-match (concat "#+DATE: " (format-time-string "<%Y-%m-%d %H:%M>")))
      (save-buffer)))
#+END_SRC

判断是否为博客org文件：
#+BEGIN_SRC emacs-lisp
    (defun custom-blog-org-file-p ()
      "Judege if current file is blog file"
      (and (buffer-file-name)
           (or (s-suffix? "/draft/" (file-name-directory (buffer-file-name)))
               (s-suffix? "/blog/" (file-name-directory (buffer-file-name))))
           (s-suffix? ".org" (buffer-file-name))))
#+END_SRC

自定义用来帮助新建文章模板的helper函数：
#+BEGIN_SRC emacs-lisp
  (defun custom-blog-init (filename)
    "Init blog helper"
    (interactive (list (read-string (format "Enter new blog name: %s%s-" (concat my-blog-post-base "/draft/") (format-time-string "%Y%m%d" (current-time))))))
    (if (string= "" filename)
        (message "Need a filename")
      (or (string-match "\\.org$" filename) (setq filename (concat (file-name-sans-extension filename) ".org")))
      (progn (setq filepath (format "%s%s-%s" (concat my-blog-post-base "/draft/") (format-time-string "%Y%m%d" (current-time)) filename))
       (find-file filepath)
       (let ((custom-org-buffer (get-file-buffer filepath)))
         (with-current-buffer custom-org-buffer
           (insert (format "#+TITLE: \n#+AUTHOR: slegetank\n#+EMAIL: slege_tank@163.com\n#+DATE: %s\n#+SETUPFILE: ~/.emacs.d/org-template/level-1.org\n#+blogtype: \n\n#+BEGIN_COMMENT PREVIEW\n\n#+END_COMMENT\n" (format-time-string "<%Y-%m-%d %H:%M>" (current-time))))
           (goto-char 9))))))
#+END_SRC

自定义草稿发布函数：
#+BEGIN_SRC emacs-lisp
  (defun custom-blog-publish ()
    (interactive)
    (if (custom-blog-org-file-p)
        (progn (dired-rename-file (buffer-file-name) (concat my-blog-post-base "/blog/" (file-name-nondirectory (buffer-file-name))) 1)
               (if (y-or-n-p "File move finished. Need to commit?")
                   (custom-blog-commit)
                 (message "\"%s\" publish finished." (buffer-file-name))))
      (message "\"%s\" is not a valid draft blog file." (buffer-file-name))))
#+END_SRC

自定义部署函数：
#+BEGIN_SRC emacs-lisp
  (defun custom-blog-deploy ()
    (interactive)
    (let ((default-directory my-blog-publish-base))
      (message "push to static blog...")
      (shell-command "git push"))
    (message "update blog.slegetank database...")
    (shell-command "ssh root@slegetank.com \"source updateblog.sh\""))

#+END_SRC

自定义插入图片链接函数：
#+BEGIN_SRC emacs-lisp
  (defun custom-blog-insert-image (event)
    (interactive "e")
    (x-focus-frame nil)
    (let* ((payload (car (last event)))
           (type (car payload))
           (fromname (cadr payload))
           (img-regexp "\\(gif\\|png\\|jp[e]?g\\)\\>")
           (destname fromname))
      (when (and  (eq 'drag-n-drop (car event))
                  (eq 'file type)
                  (string-match img-regexp fromname))
        (when (custom-blog-org-file-p)
          (let ((filebasename (file-name-base (buffer-file-name))))
            (setq destname (concat my-blog-post-base "/static/" filebasename "-" (progn (goto-char (point-min)) (number-to-string (count-matches (format "%s-" filebasename)))) "." (file-name-extension fromname)))
            (rename-file fromname destname t)))

        (goto-char (nth 1 (event-start event)))
        (insert (format "[[file:%s]]" (file-relative-name destname (file-name-directory (buffer-file-name))))))))

  (define-key org-mode-map (kbd "<drag-n-drop>") 'custom-blog-insert-image)
#+END_SRC

自定义用来更新remote博客的函数：
#+BEGIN_SRC emacs-lisp
  (defun custom-blog-commit ()
    "add commit push"
    (interactive)
    (org-publish "blog" t)
    (let ((default-directory my-blog-publish-base))
      (shell-command "git add .")
      (shell-command (format "git commit -m \"Blog updated: %s\"" (format-time-string "%Y-%m-%d %H:%M:%S" (current-time))))
      ;; (shell-command "git push")
      ))
#+END_SRC

在#+blogtype行按"s-right s-left"会根据已有的标签进行提示
#+BEGIN_SRC emacs-lisp
  (setq custom-blog-current-type "")
  (defun custom-blog-modify-type (direction)
    "Modify blog file type"
    (when (string-match "^#\\+blogtype:" (thing-at-point 'line t))
      (let* ((files (directory-files (concat my-blog-post-base "/blog") 1 "\\.org$"))
             file
             (infolist '()))
        (while (setq file (pop files))
          (let ((file-buf (find-file-noselect file nil)))
            (with-current-buffer file-buf
              (goto-char (point-min))
              (let ((beg (re-search-forward "^#\\+blogtype:" nil t)))
                (when beg
                  (let* ((end (progn (goto-char beg) (line-end-position)))
                         (type (s-trim (buffer-substring beg end))))
                    (unless (cl-position type infolist :test 'equal)
                      (setq infolist (cons type infolist)))))))))
        (if (equal custom-blog-current-type "")
            (setq custom-blog-current-type (car infolist))
          (let ((beginindex (+ (cl-position custom-blog-current-type infolist :test 'equal) direction)))
            (when (= beginindex (length infolist))
              (setq beginindex 0))
            (when (= beginindex -1)
              (setq beginindex (1- (length infolist))))

            (setq custom-blog-current-type (car (nthcdr beginindex infolist)))))
        )

      (with-current-buffer (current-buffer)
        (goto-char (point-min))
        (search-forward-regexp "^#\\+blogtype:.*?$")
        (replace-match (concat "#+blogtype: " custom-blog-current-type))
        (save-buffer))))

#+END_SRC

